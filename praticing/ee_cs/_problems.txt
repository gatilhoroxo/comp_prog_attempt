• Iterative (One Loop, Linear Scan)

1. UVa 00102 - Ecological Bin Packing (just try all 6 possible combinations)
2. UVa 00256 - Quirksome Squares (brute force, math, pre-calculate-able)
    3. UVa 00927 - Integer Sequence from ... * (use sum of arithmetic series)
    4. UVa 01237 - Expert Enough * (LA 4142, Jakarta08, input is small)
    5. UVa 10976 - Fractions Again ? * (total solutions is asked upfront; therefore do brute force twice)
6. UVa 11001 - Necklace (brute force math, maximize function)
7. UVa 11078 - Open Credit System (one linear scan)


• Iterative (Two Nested Loops)

1. UVa 00105 - The Skyline Problem (height map, sweep left-right)
2. UVa 00347 - Run, Run, Runaround ... (simulate the process)
3. UVa 00471 - Magic Numbers (somewhat similar to UVa 725)
4. UVa 00617 - Nonstop Travel (try all integer speeds from 30 to 60 mph)
5. UVa 00725 - Division (elaborated in this section)
    6. UVa 01260 - Sales * (LA 4843, Daejeon10, check all)
7. UVa 10041 - Vito’s Family (try all possible location of Vito’s House)
    8. UVa 10487 - Closest Sums * (sort and then do O(n2) pairings)
9. UVa 10730 - Antiarithmetic? (2 nested loops with pruning can pass possibly
pass the weaker test cases; note that this brute force solution is too slow for
the larger test data generated in the solution of UVa 11129)
    10. UVa 11242 - Tour de France * (plus sorting)
11. UVa 12488 - Start Grid (2 nested loops; simulate overtaking process)
12. UVa 12583 - Memory Overflow (2 nested loops; be careful of overcounting)


• Iterative (Three Or More Nested Loops, Easier)

1. UVa 00154 - Recycling (3 nested loops)
2. UVa 00188 - Perfect Hash (3 nested loops, until the answer is found)
    3. UVa 00441 - Lotto * (6 nested loops)
4. UVa 00626 - Ecosystem (3 nested loops)
5. UVa 00703 - Triple Ties: The ... (3 nested loops)
    6. UVa 00735 - Dart-a-Mania * (3 nested loops, then count)
    7. UVa 10102 - The Path in the ... * (4 nested loops will do, we do not need BFS; get max of minimum Manhattan distance from a ‘1’ to a ‘3’.)
8. UVa 10502 - Counting Rectangles (6 nested loops, rectangle, not too hard)
9. UVa 10662 - The Wedding (3 nested loops)
10. UVa 10908 - Largest Square (4 nested loops, square, not too hard)
11. UVa 11059 - Maximum Product (3 nested loops, input is small)
12. UVa 11975 - Tele-loto (3 nested loops, simulate the game as asked)
13. UVa 12498 - Ant’s Shopping Mall (3 nested loops)
14. UVa 12515 - Movie Police (3 nested loops)


• Iterative (Three-or-More Nested Loops, Harder)

1. UVa 00253 - Cube painting (try all, similar problem in UVa 11959)
2. UVa 00296 - Safebreaker (try all 10000 possible codes, 4 nested loops, use similar solution as ‘Master-Mind’ game)
3. UVa 00386 - Perfect Cubes (4 nested loops with pruning)
4. UVa 10125 - Sumsets (sort; 4 nested loops; plus binary search)
5. UVa 10177 - (2/3/4)-D Sqr/Rects/... (2/3/4 nested loops, precalculate)
6. UVa 10360 - Rat Attack (also solvable using 10242 DP max sum)
7. UVa 10365 - Blocks (use 3 nested loops with pruning)
8. UVa 10483 - The Sum Equals ... (2 nested loops for a, b, derive c from a, b;
there are 354 answers for range [0.01 .. 255.99]; similar with UVa 11236)
    9. UVa 10660 - Citizen attention ... * (7 nested loops, Manhattan distance)
10. UVa 10973 - Triangle Counting (3 nested loops with pruning)
11. UVa 11108 - Tautology (5 nested loops, try all 25 = 32 values with pruning)
    12. UVa 11236 - Grocery Store * (3 nested loops for a, b, c; derive d from
a, b, c; check if you have 949 lines of output)
13. UVa 11342 - Three-square (pre-calculate squared values from 02 to 2242, use 3 nested loops to generate the answers; use map to avoid duplicates)
14. UVa 11548 - Blackboard Bonanza (4 nested loops, string, pruning)
    15. UVa 11565 - Simple Equations * (3 nested loops with pruning)
16. UVa 11804 - Argentina (5 nested loops)
17. UVa 11959 - Dice (try all possible dice positions, compare with the 2nd one)
Also see Mathematical Simulation in Section 5.2


• Iterative (Fancy Techniques)

1. UVa 00140 - Bandwidth (max n is just 8, use next permutation; the algorithm inside next permutation is iterative)
2. UVa 00234 - Switching Channels (use next permutation, simulation)
3. UVa 00435 - Block Voting (only 220 possible coalition combinations)
4. UVa 00639 - Don’t Get Rooked (generate 216 combinations and prune)
    5. UVa 01047 - Zones * (LA 3278, WorldFinals Shanghai05, notice that
n ≤ 20 so that we can try all possible subsets of towers to be taken; then
apply inclusion-exclusion principle to avoid overcounting)
6. UVa 01064 - Network (LA 3808, WorldFinals Tokyo07, permutation of up
to 5 messages, simulation, mind the word ‘consecutive’)
7. UVa 11205 - The Broken Pedometer (try all 215 bitmask)
8. UVa 11412 - Dig the Holes (next permutation, find one possibility from 6!)
    9. UVa 11553 - Grid Game * (solve by trying all n! permutations; you can
also use DP + bitmask, see Section 8.3.1, but it is overkill)
10. UVa 11742 - Social Constraints (discussed in this section)
11. UVa 12249 - Overlapping Scenes (LA 4994, KualaLumpur10, try all permutations, a bit of string matching)
12. UVa 12346 - Water Gate Management (LA 5723, Phuket11, try all 2n combinations, pick the best one)
13. UVa 12348 - Fun Coloring (LA 5725, Phuket11, try all 2n combinations)
14. UVa 12406 - Help Dexter (try all 2p possible bitmasks, change ‘0’s to ‘2’s)
    15. UVa 12455 - Bars * (discussed in this section)


• Recursive Backtracking (Easy)

1. UVa 00167 - The Sultan Successor (8-queens chess problem)
2. UVa 00380 - Call Forwarding (simple backtracking, but we have to work with
strings, see Section 6.2)
3. UVa 00539 - The Settlers ... (longest simple path in a small general graph)
    4. UVa 00624 - CD * (input size is small, backtracking is enough)
5. UVa 00628 - Passwords (backtracking, follow the rules in description)
6. UVa 00677 - All Walks of length “n” ... (print all solutions with backtracking)
7. UVa 00729 - The Hamming Distance ... (generate all possible bit strings)
8. UVa 00750 - 8 Queens Chess Problem (discussed in this section with sample source code)
9. UVa 10276 - Hanoi Tower Troubles Again (insert a number one by one)
10. UVa 10344 - 23 Out of 5 (rearrange the 5 operands and the 3 operators)
11. UVa 10452 - Marcus, help (at each pos, Indy can go forth/left/right; try all)
    12. UVa 10576 - Y2K Accounting Bug * (generate all, prune, take max)
    13. UVa 11085 - Back to the 8-Queens * (see UVa 750, pre-calculation)


• Recursive Backtracking (Medium)

1. UVa 00222 - Budget Travel (looks like a DP problem, but the state cannot
be memoized as ‘tank’ is floating-point; fortunately, the input is not large)
2. UVa 00301 - Transportation (222 with pruning is possible)
3. UVa 00331 - Mapping the Swaps (n ≤ 5...)
4. UVa 00487 - Boggle Blitz (use map to store the generated words)
    5. UVa 00524 - Prime Ring Problem * (also see Section 5.5.1)
6. UVa 00571 - Jugs (solution can be suboptimal, add flag to avoid cycling)
    7. UVa 00574 - Sum It Up * (print all solutions with backtracking)
8. UVa 00598 - Bundling Newspaper (print all solutions with backtracking)
9. UVa 00775 - Hamiltonian Cycle (backtracking suffices because the search space cannot be that big; in a dense graph, it is more likely to have a Hamiltonian cycle, so we can prune early; we do NOT have to find the best one like in TSP problem)
10. UVa 10001 - Garden of Eden (the upperbound of 232 is scary but with efficient pruning, we can pass the time limit as the test case is not extreme)
11. UVa 10063 - Knuth’s Permutation (do as asked)
12. UVa 10460 - Find the Permuted String (similar nature with UVa 10063)
13. UVa 10475 - Help the Leaders (generate and prune; try all)
    14. UVa 10503 - The dominoes solitaire * (max 13 spaces only)
15. UVa 10506 - Ouroboros (any valid solution is AC; generate all possible next digit (up to base 10/digit [0..9]); check if it is still a valid Ouroboros sequence)
16. UVa 10950 - Bad Code (sort the input; run backtracking; the output should be sorted; only display the first 100 sorted output)
17. UVa 11201 - The Problem with the ... (backtracking involving strings)
18. UVa 11961 - DNA (there are at most 410 possible DNA strings; moreover, the mutation power is at most K ≤ 5 so the search space is much smaller; sort the output and then remove duplicates)


• Recursive Backtracking (Harder)

1. UVa 00129 - Krypton Factor (backtracking, string processing check, a bit of output formatting)
2. UVa 00165 - Stamps (requires some DP too; can be pre-calculated)
    3. UVa 00193 - Graph Coloring * (Max Independent Set, input is small)
4. UVa 00208 - Firetruck (backtracking with some pruning)
    5. UVa 00416 - LED Test * (backtrack, try all)
6. UVa 00433 - Bank (Not Quite O.C.R.) (similar to UVa 416)
7. UVa 00565 - Pizza Anyone? (backtracking with lots of pruning)
8. UVa 00861 - Little Bishops (backtracking with pruning as in 8-queens recursive backtracking solution; then pre-calculate the results)
9. UVa 00868 - Numerical maze (try row 1 to N; 4 ways; some constraints)
    10. UVa 01262 - Password * (LA 4845, Daejeon10, sort the columns in the
two 6×5 grids first so that we can process common passwords in lexicographic
order; backtracking; important: skip two similar passwords)
11. UVa 10094 - Place the Guards (this problem is like the n-queens chess problem, but must find/use the pattern!)
12. UVa 10128 - Queue (backtracking with pruning; try up to all N! (13!) permutations that satisfy the requirement; then pre-calculate the results)
13. UVa 10582 - ASCII Labyrinth (simplify complex input first; then backtrack)
14. UVa 11090 - Going in Cycle (minimum mean weight cycle problem; solvable with backtracking with important pruning when current running mean is greater than the best found mean weight cycle cost)

