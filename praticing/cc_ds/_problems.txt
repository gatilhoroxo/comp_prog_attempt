 • 1D Array Manipulation, e.g. array, C++ STL vector (or Java Vector/ArrayList)


1. UVa 00230 - Borrowers (a bit of string parsing, see Section 6.2; maintain list
of sorted books; sort key: author names first and if ties, by title; the input
size is small although not stated; we do not need to use balanced BST)
2. UVa 00394 - Mapmaker (any n-dimensional array is stored in computer memory as a single dimensional array; follow the problem description)
3. UVa 00414 - Machined Surfaces (get longest stretch of ‘B’s)
4. UVa 00467 - Synching Signals (linear scan, 1D boolean flag)
5. UVa 00482 - Permutation Arrays (you may need to use a string tokenizer—
see Section 6.2—as the size of the array is not specified)
6. UVa 00591 - Box of Bricks (sum all items; get the average; sum the total
absolute differences of each item from the average divided by two)
7. UVa 00665 - False Coin (use 1D boolean flags; all coins are initially potential
false coins; if ‘=’, all coins on the left and right are not false coins; if ‘<’ or
‘>’, all coins not on the left and right are not false coins; check if there is
only one candidate false coin left at the end)
8. UVa 00755 - 487-3279 (Direct Addressing Table; convert the letters except
Q & Z to 2-9; keep ‘0’-‘9’ as 0-9; sort the integers; find duplicates if any)
9. UVa 10038 - Jolly Jumpers * (use 1D boolean flags to check [1..n − 1])
10. UVa 10050 - Hartals (1D boolean flag)
11. UVa 10260 - Soundex (Direct Addressing Table for soundex code mapping)
12. UVa 10978 - Let’s Play Magic (1D string array manipulation)
13. UVa 11093 - Just Finish it up (linear scan, circular array, a bit challenging)
14. UVa 11192 - Group Reverse (character array)
15. UVa 11222 - Only I did it (use several 1D arrays to simplify this problem)
16. UVa 11340 - Newspaper * (DAT; see Hashing in Section 2.3)
17. UVa 11496 - Musical Loop (store data in 1D array, count the peaks)
18. UVa 11608 - No Problem (use three arrays: created; required; available)
19. UVa 11850 - Alaska (for each integer location from 0 to 1322; can Brenda
reach (anywhere within 200 miles of) any charging stations?)
20. UVa 12150 - Pole Position (simple manipulation)
21. UVa 12356 - Army Buddies * (similar to deletion in doubly linked lists,
but we can still use a 1D array for the underlying data structure)


 • 2D Array Manipulation

1. UVa 00101 - The Blocks Problem (‘stack’ like simulation; but we need to
access the content of each stack too, so it is better to use 2D array)
2. UVa 00434 - Matty’s Blocks (a kind of visibility problem in geometry, solvable
with using 2D array manipulation)
3. UVa 00466 - Mirror Mirror (core functions: rotate and reflect)
4. UVa 00541 - Error Correction (count the number of ‘1’s for each row/col; all
of them must be even; if ∃ an error, check if it is on the same row and col)
5. UVa 10016 - Flip-flop the Squarelotron (tedious)
6. UVa 10703 - Free spots (use 2D boolean array of size 500 × 500)
7. UVa 10855 - Rotated squares * (string array, 90o clockwise rotation)
8. UVa 10920 - Spiral Tap * (simulate the process)
9. UVa 11040 - Add bricks in the wall (non trivial 2D array manipulation)
10. UVa 11349 - Symmetric Matrix (use long long to avoid issues)
11. UVa 11360 - Have Fun with Matrices (do as asked)
12. UVa 11581 - Grid Successors * (simulate the process)
13. UVa 11835 - Formula 1 (do as asked)
14. UVa 12187 - Brothers (simulate the process)
15. UVa 12291 - Polyomino Composer (do as asked, a bit tedious)
16. UVa 12398 - NumPuzz I (simulate backwards, do not forget to mod 10)


 • C++ STL algorithm (Java Collections)

1. UVa 00123 - Searching Quickly (modified comparison function, use sort)
2. UVa 00146 - ID Codes * (use next permutation)
3. UVa 00400 - Unix ls (this command very frequently used in UNIX)
4. UVa 00450 - Little Black Book (tedious sorting problem)
5. UVa 00790 - Head Judge Headache (similar to UVa 10258)
6. UVa 00855 - Lunch in Grid City (sort, median)
7. UVa 01209 - Wordfish (LA 3173, Manila06) (STL next and prev permutation)
8. UVa 10057 - A mid-summer night ... (involves the median, use STL sort,
upper bound, lower bound and some checks)
9. UVa 10107 - What is the Median? * (find median of a growing/dynamic
list of integers; still solvable with multiple calls of nth element in algorithm)
10. UVa 10194 - Football a.k.a. Soccer (multi-fields sorting, use sort)
11. UVa 10258 - Contest Scoreboard * (multi-fields sorting, use sort)
12. UVa 10698 - Football Sort (multi-fields sorting, use sort)
13. UVa 10880 - Colin and Ryan (use sort)
14. UVa 10905 - Children’s Game (modified comparison function, use sort)
15. UVa 11039 - Building Designing (use sort then count different signs)
16. UVa 11321 - Sort Sort and Sort (be careful with negative mod!)
17. UVa 11588 - Image Coding (sort simplifies the problem)
18. UVa 11777 - Automate the Grades (sort simplifies the problem)
19. UVa 11824 - A Minimum Land Price (sort simplifies the problem)
20. UVa 12541 - Birthdates (LA6148, HatYai12, sort, pick youngest and oldest)


 • Bit Manipulation (both C++ STL bitset (Java BitSet) and bitmask)

1. UVa 00594 - One Little, Two Little ... (manipulate bit string with bitset)
2. UVa 00700 - Date Bugs (can be solved with bitset)
3. UVa 01241 - Jollybee Tournament (LA 4147, Jakarta08, easy)
4. UVa 10264 - The Most Potent Corner * (heavy bitmask manipulation)
5. UVa 11173 - Grey Codes (D & C pattern or one liner bit manipulation)
6. UVa 11760 - Brother Arif, ... (separate row+col checks; use two bitsets)
7. UVa 11926 - Multitasking * (use 1M bitset to check if a slot is free)
8. UVa 11933 - Splitting Numbers * (an exercise for bit manipulation)
9. IOI 2011 - Pigeons (this problem becomes simpler with bit manipulation but
the final solution requires much more than that.)
• C++ STL list (Java LinkedList)
1. UVa 11988 - Broken Keyboard ... * (rare linked list problem)


 • C++ STL stack (Java Stack)

1. UVa 00127 - “Accordian” Patience (shuffling stack)
2. UVa 00514 - Rails * (use stack to simulate the process)
3. UVa 00732 - Anagram by Stack * (use stack to simulate the process)
4. UVa 01062 - Containers * (LA 3752, WorldFinals Tokyo07, simulation
with stack; maximum answer is 26 stacks; O(n) solution exists)
5. UVa 10858 - Unique Factorization (use stack to help solving this problem)
Also see: implicit stacks in recursive function calls and Postfix conversion/evaluation in Section 9.27.


 • C++ STL queue and deque (Java Queue and Deque)

1. UVa 00540 - Team Queue (modified ‘queue’)
2. UVa 10172 - The Lonesome Cargo ... * (use both queue and stack)
3. UVa 10901 - Ferry Loading III * (simulation with queue)
4. UVa 10935 - Throwing cards away I (simulation with queue)
5. UVa 11034 - Ferry Loading IV * (simulation with queue)
6. UVa 12100 - Printer Queue (simulation with queue)
7. UVa 12207 - This is Your Queue (use both queue and deque)
Also see: queues in BFS (see Section 4.2.2)
